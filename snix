#!/usr/bin/env python

import argparse
import shlex
import os
import subprocess
import ConfigParser

from command import Command
from snixContext import snixContext
from snixCore import abort
from snixCore import create_dir

from snixLogger import SnixLogger

logger = SnixLogger.logger()

SNIX_CONF_FILE = os.path.join(os.sep, "usr", "local", "etc", "snix" + os.extsep + "conf")
SNIX_RC_DIR_NAME = "rc"

class Snix:
    """The Actual Snix CLI command. Type snix --help for more information"""

    def __init__(self, args):
        self._args = args

    def go(self):
        action = {
            "init": self.init,
            "test": self.test,
            "run": self.run,
        }.get(self._args.action)
        if self._args.argument:
            self._perform(action, self._args.argument)
        else:
            self._perform(action)

    def _perform(self, action, *args):
        logger.info("`snix {0}` with args: {1}".format(action.__name__, args))
        action(*args)

    # TODO generate keys and upload to github. 
    def _configure_git(self, _user_email, _user_name):
        msg = "Configuring git..."

        try:
            subprocess.check_call(['git', 'config', '--global', 'user.email', _user_email], stdin=None, shell=False)
            subprocess.check_call(['git', 'config', '--global', 'user.name', _user_name], stdin=None, shell=False)
            logger.info("Set global user email to: %s" % subprocess.check_output(
                ['git', 'config', '--get', 'user.email'], stdin=None, shell=False))
            logger.info("Set global user name to: %s" % subprocess.check_output(
                ['git', 'config', '--get', 'user.name'], stdin=None, shell=False))
        except subprocess.CalledProcessError as e:
            abort(msg + "{0} exited with error code{1}".format(e.cmd, e.returncode))
        logger.info(msg + 'Done!')

    # TODO this is currently mac specific. Also this might require root password.
    def _install_prerequisite_items(self):
        logger.info("Installing prerequisite items...")
        try:
            cmd = 'ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'
            Command({'command': cmd, 'command_exec_dir': os.getcwd()}, True).execute()
            Command({'command': shlex.split("brew tap caskroom/cask"), 'command_exec_dir': os.getcwd()}).execute()
            Command({'command': shlex.split("brew install python"), 'command_exec_dir': os.getcwd()}).execute()
            Command({'command': shlex.split("pip install jsonschema"), 'command_exec_dir': os.getcwd()}).execute()
        except subprocess.CalledProcessError as e:
            abort("{0} exited with error code{1}".format(e.cmd, e.returncode))

    # TODO see if you can build a graph and figure out what can be parallelized here.
    def _execute(self, manifest_file, test):
        snix_context = snixContext.construct_from(manifest_file)
        if test:
            logger.info('Test Run Requested. Here\'s what will be executed. ')
            logger.info(snix_context)
        else:
            self._install_items(snix_context)
            self._clone_repos(snix_context)
            self._execute_custom_scripts(snix_context)
            logger.info("-------->>We're done! Happy Coding!")

    def _install_items(self, context):
        for item in context.get_items():
            item.install()

    def _clone_repos(self, context):
        for repo in context.get_repos():
            repo.clone()

    def _execute_custom_scripts(self, context):
        for script in context.get_custom_scripts():
            script.execute()

    def test(self, manifest_file):
        """Parse the manifest, Validate it and show what you'll do i.e. dry run only"""
        return self._execute(manifest_file, True)

    def run(self, manifest_file):
        """Parse the manifest, Validate it and execute the manifest"""
        return self._execute(manifest_file, False)

    def init(self):
        """Initializes snix. Sets up the required directories and tools required for Snix to work."""
        if not os.path.isfile(SNIX_CONF_FILE):
            abort("%s is not a valid file path! Looks like snix wasn't bootstrapped." % SNIX_CONF_FILE)
        parser = ConfigParser.ConfigParser()
        parser.read(SNIX_CONF_FILE)
        snix_home = parser.get("config", "snix.home")
        snix_rc_dir = os.path.join(snix_home, SNIX_RC_DIR_NAME)
        create_dir(snix_rc_dir)

        self._install_prerequisite_items()

        user_email = raw_input('What email address should I configure Git with ? ')
        user_name= user_email.split('@')[0]
        self._configure_git(user_email, user_name)

        # config = {"email": user_email, "snix_root": snix_home, "snix_rc_dir": snix_rc_dir}


if __name__ == "__main__":
    cliParser = argparse.ArgumentParser()
    cliParser.add_argument("action", choices=['init', 'test', 'run'], help="An action that snix can perform.")
    cliParser.add_argument("argument", help="Additional argument for a specified action", nargs='?')
    args = cliParser.parse_args()
    Snix(args).go()

    # TODO tab completion.
    # TODO brew installer isn't dumping warning output.
    # TODO clean up the warnings.
    # TODO complain if commands that take an argument don't get one. Right now it just fails.
    # TODO: extract all the subprocess stuff into a method. - > move to snix.py
    # TODO: validate email address. -> move to snix.py
